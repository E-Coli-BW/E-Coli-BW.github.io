<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haosong Liu</title>
    <description>M.S in ECE from U of Miami, B.S. in Material Science from UMN. Classical Music and Software Engineering Lover</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Notes on Spark Internals - Part 1</title>
        <description>&lt;p&gt;&lt;strong&gt;To be done.&lt;/strong&gt; I watched &lt;a href=&quot;https://databricks.com/session/a-deeper-understanding-of-spark-internals&quot;&gt;the talk by Aaron Davidson&lt;/a&gt; and found it very helpful in understanding how spark jobs been executed and how partitions, shuffling really works.&lt;/p&gt;

&lt;p&gt;Need sometimes to digest the content and hopefully can write a summary on my own.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jul 2020 00:15:07 -0400</pubDate>
        <link>http://localhost:4000//spark/notes/spark-internals-part1/</link>
        <guid isPermaLink="true">http://localhost:4000//spark/notes/spark-internals-part1/</guid>
      </item>
    
      <item>
        <title>Git common operations</title>
        <description>&lt;p&gt;I’ve been using Git for a while and apart from the simple “git add .”, “git commit -m “blablabla” “ and “git push”, sometime I do need some other commands aside from these most common ones. Usually I would just google it and copy paste it. However, I found myself doing the same thing quite a lot recently and reckon I do need a deeper understanding on git-related concepts. That’s the motivation of this post.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Centralized Version Control vs Distributed Version control&lt;/p&gt;

    &lt;p&gt;Git is distribured version control, by distributed, we mean each collaborator has its own repo, whereas in centralized vc, you only have one grand repo.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/gitConcepts/centralized-vc.png&quot; alt=&quot;central&quot; /&gt;
 &lt;img src=&quot;/assets/gitConcepts/distributed-vc.png&quot; alt=&quot;distributed&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;fork vs clone&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;To fork is to make a copy of the original repo to your own &lt;strong&gt;repo&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;To clone is to make a copy of the repo(does not matter if it’s your forked one or an original one of yours/others) to your &lt;strong&gt;local machine&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/gitConcepts/fork.png&quot; alt=&quot;fork&quot; /&gt;
 &lt;img src=&quot;/assets/gitConcepts/clone.png&quot; alt=&quot;clone&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;upstream vs origin&lt;/p&gt;

    &lt;p&gt;These two are actually just naming conventions for different &lt;strong&gt;remotes&lt;/strong&gt;. A remote is just the repo sitting on Github &lt;strong&gt;server&lt;/strong&gt;, not the &lt;strong&gt;local&lt;/strong&gt; files you have in your laptop.&lt;/p&gt;

    &lt;p&gt;Now, what’s the difference between these two default &lt;strong&gt;remote&lt;/strong&gt;?&lt;/p&gt;

    &lt;p&gt;upstream: the &lt;strong&gt;original&lt;/strong&gt; repo
 origin: the &lt;strong&gt;forked&lt;/strong&gt; repo you are working on&lt;/p&gt;

    &lt;p&gt;Now, what if you are the owner and you did not fork anything?
 Then that repo is both the origin(your own fork) &lt;strong&gt;and&lt;/strong&gt; the upstream(your own original repo)
 &lt;img src=&quot;/assets/gitConcepts/upstreams_and_origin.png&quot; alt=&quot;upstreams and origin&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;side note&lt;/strong&gt;: when you do git fetch, you are fetching from origin(your own repo) by default. To fetch the &lt;strong&gt;original&lt;/strong&gt; repo, you need to do git fetch upstream.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pull, fetch and merge&lt;/p&gt;

    &lt;p&gt;In short:&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;pull = fetch + merge&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;merge: as the name suggests, try to combine the two into one, you can think of it as doing a union set operation where it would combine the things in the two repo. However, if in set A and set B they both have a chunk that has the same name but different contents -&amp;gt; conflict!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;fetch: simply means get sth. from the specified destination, not doing the combine stuff&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Now, when you do pull, it’s basically saying: I’m gonna fetch the remote you specified, then do a merge with your local files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to undo git pull?&lt;/p&gt;

    &lt;p&gt;Every now and then, I find myself messed up with the local branch and pulled from the remote but later found out I still prefer the local one. To reset after I wrongly pulled from origin, do&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;git reset –hard HEAD@{1}&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;This will discard the result of the git pull I did previously.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pull request&lt;/p&gt;

    &lt;p&gt;You can push the changes directly into your own repo of course, or if you have the right to push to upstream you can also push directly into upstream. However, a better and safer approach would be send a pull request to the upstream and wait for them to review and approve(ie merge) the changes you made.&lt;/p&gt;

    &lt;p&gt;The above explaination also explains why it is called “pull request” : You &lt;strong&gt;request&lt;/strong&gt; the repo you wish to make changes into to &lt;strong&gt;pull&lt;/strong&gt; your stuff and thus making that change.(merging your changes)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rebase vs reset&lt;/p&gt;

    &lt;p&gt;In part 5 above, we undo a pull by resetting the head to the previous commit.
 according to &lt;a href=&quot;https://git-scm.com/docs/git-reset&quot;&gt;official doc&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;git-reset - Reset current HEAD to the specified state&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;from the doc, we see that reset works with &lt;strong&gt;references&lt;/strong&gt;, that means, your commit history(and thus the objects relate to commit is &lt;strong&gt;unchanged&lt;/strong&gt;).&lt;/p&gt;

    &lt;p&gt;Now take a look at rebase:&lt;/p&gt;

    &lt;p&gt;according to &lt;a href=&quot;https://git-scm.com/docs/git-rebase&quot;&gt;official doc&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;git-rebase - Reapply commits on top of another base tip&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;from the doc, rebase is &lt;strong&gt;actually changing the commit history&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;in short&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;git reset –hard {commit-id}: uses a commit in local history&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;git rebase origin/{branch-name}: uses latest commit in the branch(repo)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;when to use reset?&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;You work on local branch and you messsed up sth but you mistakenly &lt;strong&gt;commit&lt;/strong&gt; that -&amp;gt; use &lt;strong&gt;reset&lt;/strong&gt;(reusing a local commit)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;when to use rebase?&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;You simply wish to use the commit your colleauge pushed to the origin(upstream) and &lt;strong&gt;discard your own work&lt;/strong&gt; -&amp;gt; use rebase which will &lt;strong&gt;base&lt;/strong&gt; your colleague’s work(the commit you chose) &lt;strong&gt;on top of your current commit&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: both reset and rebase &lt;strong&gt;will delete local changes&lt;/strong&gt;, so be careful about it&lt;/p&gt;

    &lt;p&gt;Personally, I only use rebase when I definitely wish to replace the messy local files with the good old remote branch, and use reset when I have a good old commit of &lt;strong&gt;my own&lt;/strong&gt; and I need that commit back.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;refs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3357122/git-pull-vs-git-fetch-vs-git-rebase&quot;&gt;pull,fetch vs rebase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thepilcrow.net/explaining-basic-concepts-git-and-github/&quot;&gt;git basic concept&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/9257533/what-is-the-difference-between-origin-and-upstream-on-github&quot;&gt;origin vs upstream&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14961255/how-does-git-merge-work-in-details&quot;&gt;how git merge works&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3419658/understanding-git-fetch-then-merge&quot;&gt;what it means when you fetch and merge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase#:~:text=What%20is%20git%20rebase%3F&amp;amp;text=From%20a%20content%20perspective%2C%20rebasing,them%20to%20the%20specified%20base.&quot;&gt;git rebasing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11225293/what-is-the-difference-between-git-reset-vs-git-rebase&quot;&gt;rebase vs reset&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 19 Jul 2020 00:15:07 -0400</pubDate>
        <link>http://localhost:4000//git/notes/git-common-operations/</link>
        <guid isPermaLink="true">http://localhost:4000//git/notes/git-common-operations/</guid>
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Jul 2020 00:15:07 -0400</pubDate>
        <link>http://localhost:4000//testmultitag/randomstuff/experimental/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000//testmultitag/randomstuff/experimental/welcome-to-jekyll/</guid>
      </item>
    
      <item>
        <title>Test Categories Functionality</title>
        <description>&lt;p&gt;This is just a test for displaying user defined categories for posts&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2020 00:15:07 -0400</pubDate>
        <link>http://localhost:4000//functionaltest/test-categories/</link>
        <guid isPermaLink="true">http://localhost:4000//functionaltest/test-categories/</guid>
      </item>
    
      <item>
        <title>Some Notes on Several Concepts I always feel vague about</title>
        <description>&lt;h1 id=&quot;programming-wise-concepts&quot;&gt;Programming-wise concepts&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Thread vs Process vs Coroutines&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Coroutine: sequential processing. one task gets executed at any given moment&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Threads: concurrent processes, multiple threads may be running at any given moment. (Note: single core can also do multithreading via slicing)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Process: Both processes and threads are independent sequences of execution. However, thread &lt;strong&gt;shares&lt;/strong&gt; memory space, process runs in &lt;strong&gt;seperate&lt;/strong&gt; memory spaces&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Key difference between Coroutine and Thread&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Coroutine switches context &lt;strong&gt;cooperatively&lt;/strong&gt; meaning the &lt;strong&gt;programmer/programming language/runtime&lt;/strong&gt; controls when a switch happens.&lt;/p&gt;

&lt;p&gt;Thread swtiches context preemptively, meaning &lt;strong&gt;kernel&lt;/strong&gt; is scheduling(controls) the context-switching&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some examples&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Cotoutine: C# task, Python generator i.e: programmers can control when an object stops running and handle the control to sth else. OS kernels &lt;strong&gt;does not&lt;/strong&gt; involve in this context-swithing/scheduling&lt;/p&gt;

&lt;p&gt;Thread: Java multi-thread programming API, you can control thread on high level but the actual context-switching is done by the kernel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why coroutine if we already have thread?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;see &lt;a href=&quot;https://stackoverflow.com/questions/1934715/difference-between-a-coroutine-and-a-thread&quot;&gt;here&lt;/a&gt;, short answer: co-routines have less overhead than thread due to the fact that co-routine don’t need kernel scheduler to work.&lt;/p&gt;

&lt;p&gt;ref: 
1) &lt;a href=&quot;https://stackoverflow.com/questions/1934715/difference-between-a-coroutine-and-a-thread&quot;&gt;StackOverflow: Difference between a coroutine and a thread&lt;/a&gt;
2) &lt;a href=&quot;https://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread&quot;&gt;StackOverflow: What is the difference between a process and a thread?&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Concurrency vs Parallelization&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Concurrency means two or more tasks start, run, and complete in overlapping time periods. It may &lt;strong&gt;NOT necessarily&lt;/strong&gt; be running at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g: multi-tasking on a single-core&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parallelization means tasks are really running at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.: multi-tasking on a multi-core(if well programmed so parallelization can actually take place on difference cores)&lt;/p&gt;

&lt;p&gt;ref: &lt;a href=&quot;https://stackoverflow.com/questions/1050222/what-is-the-difference-between-concurrency-and-parallelism&quot;&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some examples of Multi-thread, Multi-process, Coroutines&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;multi-thread: Spark&lt;/li&gt;
  &lt;li&gt;multi-process: Hadoop&lt;/li&gt;
  &lt;li&gt;coroutines: C# tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;some-follow-up-on-previous-section&quot;&gt;Some follow up on previous section&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Coroutine vs Asynchrounous pattern?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Particularly in JavaScript we have callback/Promise/Async Await which all boils down to Asynchrounous programming.&lt;/p&gt;

&lt;p&gt;Asynchrounous basically means during the flow of execution, you can pause some of the code block and wait for it to continue running from where it has been left off when a specific event happens(that triggers the callback function to run)&lt;/p&gt;

&lt;p&gt;Coroutine is more of a threading thing and **Threading is about workers; asynchrony is about tasks. **&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Aynchronous vs Multithreading vs Multiprocessing?
My Own Analogy(might be wrong):&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Asynchronous: You hire one librarian(“worker”) handling the borrowing and returning of all the books (“tasks”). The working pattern of this librarian is asynchronous. It can pause at certain tasks and wait for response to return and continue working on it.&lt;/p&gt;

&lt;p&gt;Multithread: You hire many librarians working for you. Each librarian can do the work and they all know about the resources in your library when a customer come.&lt;/p&gt;

&lt;p&gt;Multiprocessing: You hire many librarians. Each librarian is responsible for &lt;strong&gt;his own&lt;/strong&gt; section. When a customer come, he can ask certain librarians(not all, as not all of them knows the same thing (not sharing memory) ) for certain books. It still works in paralell but each librarian no longer sits on the same ground(know the same memory infomation)&lt;/p&gt;

&lt;h1 id=&quot;oskernel-wise-concepts&quot;&gt;OS/kernel-wise concepts&lt;/h1&gt;

&lt;p&gt;These concepts are more of a OS/kernel thing rather than programming&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Kernel Space, User Space, Heap, Stack
see &lt;a href=&quot;https://medium.com/@shoheiyokoyama/understanding-memory-layout-4ef452c2e709&quot;&gt;medium post&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;short answer on stack and heap:&lt;/p&gt;

&lt;p&gt;stack: Storing data needed by function calls in a program, &lt;strong&gt;OS kernel&lt;/strong&gt; handles the memory allocation, scope &lt;strong&gt;limits to function calls&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;heap: Dynamic memory allocation, memory allocation handled by &lt;strong&gt;user&lt;/strong&gt;, scope &lt;strong&gt;not limited&lt;/strong&gt; variables referenced from several places&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Jul 2020 00:15:07 -0400</pubDate>
        <link>http://localhost:4000//concurrency/parallelization%20notes/learning/some-notes-on-several-concepts-I-always-feel-vague-about/</link>
        <guid isPermaLink="true">http://localhost:4000//concurrency/parallelization%20notes/learning/some-notes-on-several-concepts-I-always-feel-vague-about/</guid>
      </item>
    
      <item>
        <title>first attempt using jekyll</title>
        <description>&lt;p&gt;First time ever setting up personal blog for showcasing my resume. Also serve as a public “notebook” to let me jot down some random stuff (process of setting up environment, some weird bugs I encountered, some random thoughts, material science jokes etc).&lt;/p&gt;

&lt;p&gt;At the moment, I’m still a newbie to jekyll. Took me a whole lot of effort to just tweak the site a little bit. Although right now, it’s good enough for me. I got the site up and running. Can do some simple blogging, can showcase my resume and that’s pretty much everything I need for now.&lt;/p&gt;

&lt;p&gt;I will keep learning jekyll in hope to add some customize features to my site. The most urgent one right now is to add clickable tags for each blog and a tag cloud on the index page. So far, I still cannot figure out how to do that even after following a blogger’s tutorial. Guess it’s because I’m still quite confused about the overall structure of jekyll. It is very elegant and easy to use, but at the moment, I find it also emposes a lot of weird overhead and the documentation sometimes a bit confusing.&lt;/p&gt;

&lt;p&gt;But anyway, I will keep researching about this and try to really master it to make my site a easy to use static blog for myself.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2020 00:15:07 -0400</pubDate>
        <link>http://localhost:4000//randomstuff/first-attempt-using-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000//randomstuff/first-attempt-using-jekyll/</guid>
      </item>
    
      <item>
        <title>Design Pattern Notes</title>
        <description>&lt;p&gt;Not started yet, plan on first focus on learning about factory, observer, MVC, IoC using actual &lt;strong&gt;code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I find it &lt;strong&gt;extremely useless&lt;/strong&gt; learning design pattern by listening to lectures or by only reading books alone&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2020 00:15:07 -0400</pubDate>
        <link>http://localhost:4000//design%20pattern/notes/learning/design-pattern-notes/</link>
        <guid isPermaLink="true">http://localhost:4000//design%20pattern/notes/learning/design-pattern-notes/</guid>
      </item>
    
  </channel>
</rss>